<#@ template hostspecific="false" language="C#" #>  
<#@ output extension=".cs" #>

using System;
using System.Collections;
using System.Collections.Generic;

namespace LibRetriX.Unsafe
{
<# foreach(var TemplateData in new Tuple<string,string>[] { Tuple.Create("Short","short"), Tuple.Create("UShort","ushort"), Tuple.Create("Int","int"), Tuple.Create("UInt","uint")})
{
#>
	public unsafe class UnmanagedList<#Write($"{TemplateData.Item1}");#> : IReadOnlyList<<#Write($"{TemplateData.Item2}");#>>
    {
        private class InnerEnumerator : IEnumerator<<#Write($"{TemplateData.Item2}");#>>
        {
            private <#Write($"{TemplateData.Item2}");#>* StartPtr { get; }
            private <#Write($"{TemplateData.Item2}");#>* EndPtr { get; }
            private <#Write($"{TemplateData.Item2}");#>* CurrentPtr { get; set; } = null;

            public <#Write($"{TemplateData.Item2}");#> Current => *CurrentPtr;
            object IEnumerator.Current => Current;

            public InnerEnumerator(<#Write($"{TemplateData.Item2}");#>* startPtr, <#Write($"{TemplateData.Item2}");#>* endPtr)
            {
                StartPtr = startPtr;
                EndPtr = endPtr;
            }

            public void Dispose()
            {
            }

            public bool MoveNext()
            {
                CurrentPtr++;
                return CurrentPtr < EndPtr;
            }

            public void Reset()
            {
                CurrentPtr = StartPtr;
            }
        }

        private <#Write($"{TemplateData.Item2}");#>* StartPtr { get; }

        public int Count { get; }
        public <#Write($"{TemplateData.Item2}");#> this[int index] => StartPtr[index];

        public UnmanagedList<#Write($"{TemplateData.Item1}");#>(IntPtr startPtr, int count)
        {
            StartPtr = (<#Write($"{TemplateData.Item2}");#>*)startPtr.ToPointer();
            Count = count;
        }

        public IEnumerator<<#Write($"{TemplateData.Item2}");#>> GetEnumerator()
        {
            return new InnerEnumerator(StartPtr, StartPtr + Count);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }

<#
}
#>
}
